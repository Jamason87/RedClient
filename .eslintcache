[{"C:\\Users\\Josh Mason\\Desktop\\WDOctober2020\\RedBadgeFunko\\client\\src\\index.tsx":"1","C:\\Users\\Josh Mason\\Desktop\\WDOctober2020\\RedBadgeFunko\\client\\src\\App.tsx":"2","C:\\Users\\Josh Mason\\Desktop\\WDOctober2020\\RedBadgeFunko\\client\\src\\components\\contexts\\RootContext.tsx":"3","C:\\Users\\Josh Mason\\Desktop\\WDOctober2020\\RedBadgeFunko\\client\\src\\components\\auth\\AuthenticatedRoute.tsx":"4","C:\\Users\\Josh Mason\\Desktop\\WDOctober2020\\RedBadgeFunko\\client\\src\\components\\pages\\Login.tsx":"5","C:\\Users\\Josh Mason\\Desktop\\WDOctober2020\\RedBadgeFunko\\client\\src\\components\\pages\\ProtectedTest.tsx":"6","C:\\Users\\Josh Mason\\Desktop\\WDOctober2020\\RedBadgeFunko\\client\\src\\components\\pages\\Signup.tsx":"7","C:\\Users\\Josh Mason\\Desktop\\WDOctober2020\\RedBadgeFunko\\client\\src\\components\\pages\\UnprotectedTest.tsx":"8","C:\\Users\\Josh Mason\\Desktop\\WDOctober2020\\RedBadgeFunko\\client\\src\\components\\Navbar.tsx":"9"},{"size":463,"mtime":1608752672011,"results":"10","hashOfConfig":"11"},{"size":988,"mtime":1608756645574,"results":"12","hashOfConfig":"11"},{"size":1137,"mtime":1608755975248,"results":"13","hashOfConfig":"11"},{"size":610,"mtime":1608755874138,"results":"14","hashOfConfig":"11"},{"size":3856,"mtime":1608756016246,"results":"15","hashOfConfig":"11"},{"size":146,"mtime":1608755797570,"results":"16","hashOfConfig":"11"},{"size":4936,"mtime":1608756003154,"results":"17","hashOfConfig":"11"},{"size":152,"mtime":1608755806898,"results":"18","hashOfConfig":"11"},{"size":3127,"mtime":1608758153513,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"2p6n5k",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Josh Mason\\Desktop\\WDOctober2020\\RedBadgeFunko\\client\\src\\index.tsx",[],["43","44"],"C:\\Users\\Josh Mason\\Desktop\\WDOctober2020\\RedBadgeFunko\\client\\src\\App.tsx",[],"C:\\Users\\Josh Mason\\Desktop\\WDOctober2020\\RedBadgeFunko\\client\\src\\components\\contexts\\RootContext.tsx",["45"],"// RootContext.js\r\nimport React, { useEffect, useState } from 'react';\r\n\r\ntype ContextTypes = {\r\n    authenticated: string,\r\n    setAuthenticated: any,\r\n    authBody: string,\r\n    setAuthBody: any\r\n}\r\n\r\nexport const RootContext = React.createContext<Partial<ContextTypes>>({});\r\n\r\n//RootContext surronds the whole application so we can call useContext(RootContext) in any component to get global variables (auth, authbody)\r\nexport default ({ children }: any) => {\r\n  const prevAuth = localStorage.getItem('authenticated') || '';\r\n  const prevAuthBody = localStorage.getItem('authBody') || '';\r\n\r\n  const [authenticated, setAuthenticated] = useState(prevAuth);\r\n  const [authBody, setAuthBody] = useState(prevAuthBody);\r\n\r\n  useEffect(\r\n    () => {\r\n      localStorage.setItem('authenticated', authenticated);\r\n      localStorage.setItem('authBody', authBody);\r\n    },\r\n    [authenticated, authBody]\r\n  );\r\n\r\n  const defaultContext = {\r\n    authenticated,\r\n    setAuthenticated,\r\n    authBody,\r\n    setAuthBody\r\n  };\r\n\r\n  return (\r\n    <RootContext.Provider value={defaultContext}>\r\n      {children}\r\n    </RootContext.Provider>\r\n  );\r\n};","C:\\Users\\Josh Mason\\Desktop\\WDOctober2020\\RedBadgeFunko\\client\\src\\components\\auth\\AuthenticatedRoute.tsx",["46"],"import React, { useContext } from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport { RootContext } from '../contexts/RootContext';\r\n\r\n//Acts as a wrapper for the react router Route component.\r\nexport default ({ render, ...routeProps }: any) => {\r\n  const { authenticated } = useContext(RootContext);\r\n\r\n  //Checks if the user is authenticated and shows the correct page, otherwise redirects to the login page.\r\n  return (\r\n    <Route\r\n      {...routeProps}\r\n      render={() => (authenticated === 'true' ? \r\n        render() : \r\n        <Redirect to='/login' />)\r\n      }\r\n    />\r\n  );\r\n};","C:\\Users\\Josh Mason\\Desktop\\WDOctober2020\\RedBadgeFunko\\client\\src\\components\\pages\\Login.tsx",["47"],"import { Grid, Paper, TextField, Button, Box } from \"@material-ui/core\";\r\nimport Axios from \"axios\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nimport { RootContext } from '../contexts/RootContext';\r\n\r\nfunction Login() {\r\n    const [iUsername, setIUsername] = useState('');\r\n    const [iPassword, setIPassword] = useState('');\r\n\r\n    const rContext = React.useContext(RootContext);\r\n\r\n    //Connects to server to login a new user\r\n    function submit(e: any) {\r\n        e.preventDefault();\r\n\r\n        //Handle login token here\r\n        Axios.post('http://localhost:4002/user/login', {\r\n            username: iUsername,\r\n            password: iPassword\r\n        })\r\n            .then(res => {\r\n                if (res.data.token) {\r\n                    localStorage.setItem('token', res.data.token);\r\n                    rContext.setAuthenticated('true');\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log('ERROR', err)\r\n            })\r\n    }\r\n\r\n    function logout() {\r\n        localStorage.removeItem('token');\r\n        rContext.setAuthenticated('false');\r\n    }\r\n\r\n    function loggedInView() {\r\n        return (\r\n            <Grid container spacing={0} alignItems=\"center\" justify=\"center\" direction=\"column\">\r\n                <Grid item xs={6}>\r\n                    <Paper>\r\n                        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" style={{ padding: \"10px\", width: \"300px\" }}>\r\n                            You are already logged in!\r\n                            <Button onClick={logout}>Logout</Button>\r\n                        </Box>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    return (\r\n        rContext.authenticated === 'true' ? loggedInView() :\r\n            <Grid container spacing={0} alignItems=\"center\" justify=\"center\" direction=\"column\">\r\n                <Grid item xs={6}>\r\n                    <Paper>\r\n                        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" style={{ padding: \"10px\", width: \"300px\" }}>\r\n                            <form noValidate autoComplete=\"off\">\r\n                                <Grid container direction=\"column\">\r\n                                    <Grid item>\r\n                                        <h1 style={{ textAlign: \"center\" }}>Login</h1>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <TextField id=\"standard-basic\" label=\"Username\" onChange={\r\n                                            (e) => {\r\n                                                e.preventDefault();\r\n                                                setIUsername(e.target.value);\r\n                                            }\r\n                                        } />\r\n                                        <br /><br />\r\n                                        <TextField id=\"standard-basic\" label=\"Password\" onChange={\r\n                                            (e) => {\r\n                                                e.preventDefault();\r\n                                                setIPassword(e.target.value);\r\n                                            }\r\n                                        } />\r\n                                    </Grid>\r\n                                    <Grid item style={{ textAlign: \"center\", padding: \"30px\" }}>\r\n                                        <Button onClick={submit} variant=\"contained\" color=\"primary\">Submit</Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </form>\r\n                        </Box>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n    )\r\n}\r\n\r\nexport default Login;","C:\\Users\\Josh Mason\\Desktop\\WDOctober2020\\RedBadgeFunko\\client\\src\\components\\pages\\ProtectedTest.tsx",[],"C:\\Users\\Josh Mason\\Desktop\\WDOctober2020\\RedBadgeFunko\\client\\src\\components\\pages\\Signup.tsx",["48","49"],"import { Grid, Paper, TextField, Button, Box } from \"@material-ui/core\";\r\nimport Axios from \"axios\";\r\nimport React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { RootContext } from \"../contexts/RootContext\";\r\n\r\nfunction Signup() {\r\n    const [iUsername, setIUsername] = useState('');\r\n    const [iEmail, setIEmail] = useState('');\r\n    const [iPassword, setIPassword] = useState('');\r\n\r\n    const [registered, setRegistered] = useState(false)\r\n    const [loggedIn, setLoggedIn] = useState(false)\r\n\r\n    const rContext = React.useContext(RootContext);\r\n\r\n    //Connects to server to register a new user\r\n    function submit(e: any) {\r\n        e.preventDefault();\r\n\r\n        Axios.post('http://localhost:4002/user/register', {\r\n            email: iEmail,\r\n            username: iUsername,\r\n            password: iPassword\r\n        })\r\n            .then(res => {\r\n                //success\r\n                setRegistered(true);\r\n\r\n            })\r\n            .catch(err => {\r\n                //issue\r\n            })\r\n    }\r\n\r\n    function loggedInView() {\r\n        return (\r\n            <Grid container spacing={0} alignItems=\"center\" justify=\"center\" direction=\"column\">\r\n                <Grid item xs={6}>\r\n                    <Paper>\r\n                        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" style={{ padding: \"10px\", width: \"300px\" }}>\r\n                            You are already logged in!  You don't need to create an account!\r\n                        </Box>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    function registeredView() {\r\n        return (\r\n            <Grid container spacing={0} alignItems=\"center\" justify=\"center\" direction=\"column\">\r\n                <Grid item xs={6}>\r\n                    <Paper>\r\n                        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" style={{ padding: \"10px\", width: \"300px\" }}>\r\n                            Your account has been succesfully created!\r\n                        </Box>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    function defaultView() {\r\n        return (\r\n            <Grid container spacing={0} alignItems=\"center\" justify=\"center\" direction=\"column\">\r\n                <Grid item xs={6}>\r\n                    <Paper>\r\n                        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" style={{ padding: \"10px\", width: \"300px\" }}>\r\n                            <form noValidate autoComplete=\"off\">\r\n                                <Grid container direction=\"column\">\r\n                                    <Grid item>\r\n                                        <h1 style={{textAlign: \"center\"}}>Signup</h1>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <TextField id=\"standard-basic\" label=\"Email\" onChange={\r\n                                                (e) => {\r\n                                                    e.preventDefault();\r\n                                                    setIEmail(e.target.value);\r\n                                                }\r\n                                            }  />\r\n                                        <br /><br />\r\n                                        <TextField id=\"standard-basic\" label=\"Username\" onChange={\r\n                                                (e) => {\r\n                                                    e.preventDefault();\r\n                                                    setIUsername(e.target.value);\r\n                                                }\r\n                                            }  />\r\n                                        <br /><br />\r\n                                        <TextField id=\"standard-basic\" label=\"Password\" onChange={\r\n                                                (e) => {\r\n                                                    e.preventDefault();\r\n                                                    setIPassword(e.target.value);\r\n                                                }\r\n                                            }  />\r\n                                    </Grid>\r\n                                    <Grid item style={{textAlign: \"center\", padding: \"30px\"}}>\r\n                                        <Button variant=\"contained\" color=\"primary\" onClick={submit}>Submit</Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </form>\r\n                        </Box>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {rContext.authenticated ==='true' ? loggedInView() : registered ? registeredView() : defaultView()}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Signup;","C:\\Users\\Josh Mason\\Desktop\\WDOctober2020\\RedBadgeFunko\\client\\src\\components\\pages\\UnprotectedTest.tsx",[],"C:\\Users\\Josh Mason\\Desktop\\WDOctober2020\\RedBadgeFunko\\client\\src\\components\\Navbar.tsx",["50","51"],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":14,"column":1,"nodeType":"58","endLine":41,"endColumn":3},{"ruleId":"56","severity":1,"message":"57","line":6,"column":1,"nodeType":"58","endLine":19,"endColumn":3},{"ruleId":"59","severity":1,"message":"60","line":3,"column":17,"nodeType":"61","messageId":"62","endLine":3,"endColumn":26},{"ruleId":"59","severity":1,"message":"63","line":13,"column":12,"nodeType":"61","messageId":"62","endLine":13,"endColumn":20},{"ruleId":"59","severity":1,"message":"64","line":13,"column":22,"nodeType":"61","messageId":"62","endLine":13,"endColumn":33},{"ruleId":"59","severity":1,"message":"65","line":1,"column":18,"nodeType":"61","messageId":"62","endLine":1,"endColumn":22},{"ruleId":"59","severity":1,"message":"66","line":1,"column":24,"nodeType":"61","messageId":"62","endLine":1,"endColumn":27},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'loggedIn' is assigned a value but never used.","'setLoggedIn' is assigned a value but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","no-global-assign","no-unsafe-negation"]